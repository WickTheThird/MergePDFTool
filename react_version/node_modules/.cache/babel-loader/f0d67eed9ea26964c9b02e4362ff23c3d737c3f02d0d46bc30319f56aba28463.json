{"ast":null,"code":"var _jsxFileName = \"/Users/filipbumbu/Documents/GitHub/merge_pdf_script/react_version/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [mergedFile, setMergedFile] = useState(null);\n  const handleFileChange = e => {\n    setFiles(e.target.files);\n  };\n  const handleMerge = async () => {\n    if (files.length === 0) {\n      alert(\"Please upload PDF files to merge.\");\n      return;\n    }\n    try {\n      const pdfDoc = await PDFDocument.create();\n      for (const file of files) {\n        const arrayBuffer = await file.arrayBuffer();\n        const donorPdf = await PDFDocument.load(arrayBuffer);\n        const copiedPages = await pdfDoc.copyPages(donorPdf, donorPdf.getPageIndices());\n        copiedPages.forEach(page => pdfDoc.addPage(page));\n      }\n      const mergedPdfBytes = await pdfDoc.save();\n      const mergedBlob = new Blob([mergedPdfBytes], {\n        type: \"application/pdf\"\n      });\n      const mergedUrl = URL.createObjectURL(mergedBlob);\n      setMergedFile(mergedUrl);\n    } catch (error) {\n      console.error(\"Error merging PDFs:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      accept: \"application/pdf\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMerge,\n      disabled: files.length === 0,\n      children: \"Merge PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), mergedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Merged PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: mergedFile,\n        download: \"merged_output.pdf\",\n        children: \"Download Merged PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"myyNTJUpZdNNgLCs3NnepYV15nQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PDFDocument","jsxDEV","_jsxDEV","App","_s","files","setFiles","mergedFile","setMergedFile","handleFileChange","e","target","handleMerge","length","alert","pdfDoc","create","file","arrayBuffer","donorPdf","load","copiedPages","copyPages","getPageIndices","forEach","page","addPage","mergedPdfBytes","save","mergedBlob","Blob","type","mergedUrl","URL","createObjectURL","error","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","multiple","accept","onChange","onClick","disabled","href","download","_c","$RefreshReg$"],"sources":["/Users/filipbumbu/Documents/GitHub/merge_pdf_script/react_version/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\nconst App = () => {\n  const [files, setFiles] = useState([]);\n  const [mergedFile, setMergedFile] = useState(null);\n\n  const handleFileChange = (e) => {\n    setFiles(e.target.files);\n  };\n\n  const handleMerge = async () => {\n    if (files.length === 0) {\n      alert(\"Please upload PDF files to merge.\");\n      return;\n    }\n\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      for (const file of files) {\n        const arrayBuffer = await file.arrayBuffer();\n        const donorPdf = await PDFDocument.load(arrayBuffer);\n        const copiedPages = await pdfDoc.copyPages(\n          donorPdf,\n          donorPdf.getPageIndices()\n        );\n        copiedPages.forEach((page) => pdfDoc.addPage(page));\n      }\n\n      const mergedPdfBytes = await pdfDoc.save();\n      const mergedBlob = new Blob([mergedPdfBytes], {\n        type: \"application/pdf\",\n      });\n      const mergedUrl = URL.createObjectURL(mergedBlob);\n\n      setMergedFile(mergedUrl);\n    } catch (error) {\n      console.error(\"Error merging PDFs:\", error);\n    }\n  };\n\n  return (\n    <div style={{ padding: \"20px\" }}>\n      <h1>Merge PDFs</h1>\n      <input\n        type=\"file\"\n        multiple\n        accept=\"application/pdf\"\n        onChange={handleFileChange}\n      />\n      <button onClick={handleMerge} disabled={files.length === 0}>\n        Merge PDFs\n      </button>\n      {mergedFile && (\n        <div>\n          <h3>Merged PDF</h3>\n          <a href={mergedFile} download=\"merged_output.pdf\">\n            Download Merged PDF\n          </a>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}